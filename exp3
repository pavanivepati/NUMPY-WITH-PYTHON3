
Exp no 3: NUMPY ARRAY

3)Write a Numpy program using NumPy methods -asarray,append, size,itemsize,nbytes,unique,union id ,tile.

Exp no 3.1:
(a)To convert a list and tuple into arrays.

AIM:
To convert a list and tuple into arrays.

DESCRIPTION:
For converting a list and tuple into an array we use asarray() function in NumPy.
asarray():
asarray() function is used when we want to convert input to an array. Input can be lists, lists of tuples, tuples, tuples of tuples, tuples of lists and arrays.
Syntax:
numpy.asarray(arr, dtype=None, order=None)


PROGRAM:
import numpy as np
my_list = [1, 2, 3, 4, 5, 6, 7, 8]
print (my_list)
print(“List to array: “)
print(np.asarray(my_list))
my_tuple = ([8, 4, 6], [1, 2, 3])
print (my_tuple)
print(“Tuple to array: “)
sarray(my_tuple))


OUTPUT:
[1, 2, 3, 4, 5, 6, 7, 8]
List to array: 
[1 2 3 4 5 6 7 8]
([8, 4, 6], [1, 2, 3])
Tuple to array: 
[[8 4 6]
 [1 2 3]]


Exp no 3.2:
(b)To append values to the end of an array

AIM:
To append values to the end of an array

DESCRIPTION:
append():
The append() function is used to append values to the end of an given array. Values are appended to a copy of this array.
These values are appended to a copy of arr. It must be of the correct shape (the same shape as arr, excluding axis).
Syntax:
numpy.append(array, values, axis = None)

PROGRAM:
import numpy as np
array=[1,2,3,4,5]
print(array)
array=np.append(array,[6,7,8,9,10,11,12])
print(array)

OUTPUT:
[1, 2, 3, 4, 5]
[ 1  2  3  4  5  6  7  8  9 10 11 12]




Exp no 3.3:
(C )To find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements.

AIM:
To find the number of elements of an array, length of one array element in bytes and total bytes consumed by the elements.

DESCRIPTION:
Size():
In Python, numpy.size() function count the number of elements along a given axis.
Syntax:  numpy.size(arr, axis=None)
Itemsize():
Numpy.ndarray.itemsize() function return the length of one array element in bytes.
E.g:  for this NumPy array [ [3,4,6], [0,8,1]], itemsize will be 8, because this array consists of integers and size of integer (in bytes) is 8 bytes.
Syntax:numpy.ndarray.itemsize(arr)
Nbytes():
Nbytes() function return total bytes consumed by the elements of the array.
Syntax: numpy.ndarray.nbytes(arr)

PROGRAM:
import numpy as np
array=np.array( [1,2,3,4,5] )
print(array)
print(“size is:”,array.size)
print (“Length is:”,array.itemsize)
print (“Total bytes are:”,array.nbytes)

OUTPUT:
[1 2 3 4 5]
Size is: 5
Length is: 8
Total bytes are: 40


Exp no 3.4:
(d)To get  the unique elements of an array.

AIM:
To get  the unique elements of an array.

DESCRIPTION:
The unique() function is used to find the unique elements of an array.Returns the sorted unique elements of an array.
Syntax: 
numpy.unique(filt, trim=’fb’)

PROGRAM:
import numpy as np
array=np.array( [ 10,11,12,20,23,12,11,25,45,10,45,70] )
print (array)
print (“Unique sorted list is:”)
print(np.unique(array))

OUTPUT:
[10 11 12 20 23 12 11 25 45 10 45 70]
Unique sorted list is:
[10 11 12 20 23 25 45 70]


Exp no 3.5:
(e)To find the union of two arrays .Union will return the unique,sorted array of values that are in  either of the two input arrays.

AIM:
To find the union of two arrays .Union will return the unique,sorted array of values that are in  either of the two input arrays.

DESCRIPTION:
Union id():
Find the union of two arrays. Return the unique, sorted array of values that are in either of the two input arrays.
Syntax :  numpy.union1d(arr1, arr2)

PROGRAM:
import numpy as np
arr1=np.array([ 10,12,14,16,17,18,25])
arr2=np.array([11,12,13,14,15,16,17,18])
print (arr1)
print(arr2)
print(“union of two arrays:”)
print(np.union1d(arr1,arr2))

OUTPUT:
[10 12 14 16 17 18 25]
[11 12 13 14 15 16 17 18]
Union of two arrays:
[10 11 12 13 14 15 16 17 18 25]


Exp no 3.6:
(f) To construct an array by repeating its elements.

AIM:
To construct an array by repeating its elements.

DESCRIPTION:
tile():
The numpy.tile() function constructs a new array by repeating array – ‘arr’, the number of times we want to repeat as per repetitions. The resulted array will have dimensions max(arr.ndim, repetitions) where, repetitions is the length of repetitions.
If arr.ndim> repetitions, reps is promoted to arr.ndim by pre-pending 1’s to it.
If arr.ndim< repetitions, reps is promoted to arr.ndim by pre-pending new axis.
Syntax :numpy.tile(arr, repetitions)

PROGRAM:
import numpy as np
a=np.array([10,20,30,40,50])
print(a)
print(“An array with repeated elements:”)
print(np.tile(a,5))

OUTPUT:
[10 20 30 40 50]
An array with repeated elements:
[10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40 50 10 20 30 40  50]
