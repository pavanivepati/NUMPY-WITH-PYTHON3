Exp no 4: NUMPY ARRAY

4)Write a NumPy program using methods – arange, dot, savetxt, loadtxt, sin, sort

Exp no 4.1:
4)a)To create an array of all the even integers from 30 to 70.

AIM:
To create an array of all the even integers from 30 to 70.

DESCRIPTION:
arange():
NumPyarange() is one of the array creation routines based on numerical ranges. It creates an instance of ndarray with evenly spaced values and returns the reference to it. You can define the interval of the values contained in an array, space between them, and their type with four parameters of arange() : numpy.
Syntax:
numpy.arrange([start, ]stop, [step, ], dtype=none) 

The arange() function is used to get evenly spaced values within a given interval. Values are generated within the half-open interval [start, stop]. For integer arguments the function is equivalent to the Python built-in range function, but returns an ndarray rather than a list.

PROGRAM:
import numpy as np
array=np.arange(30,71,2)
print("integer values range from 30 to 70:")
print(array)

OUTPUT:
integer values range from 30 to 70:
[30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70]

Exp no 4.2:
4)b) To create a vector with values ranging from 15 to 55 and print all values except

AIM: To create a vector with values ranging from 15 to 55 and print all values except
the first and last.

DESCRIPTION:
arange():
NumPyarange() is one of the array creation routines based on numerical ranges. It creates an instance of ndarray with evenly spaced values and returns the reference to it. You can define the interval of the values contained in an array, space between them, and their type with four parameters of arange() : numpy.
Syntax:
numpy.arrange([start, ]stop, [step, ], dtype=none) 

PROGRAM:
import numpy as np
vector=np.arange(15,55)
print("vector wth values from 15 and 55:")
print(vector)
print("A vector with values ranging from 15 to 55 and print all values except the first and last elements")
print(vector[1:-1])

OUTPUT:
vector wth values from 15 and 55:
[15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54]
A vector with values ranging from 15 to 55 and print all values except the first and last elements
[16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
 40 41 42 43 44 45 46 47 48 49 50 51 52 53]

Exp no 4.3:
4)c)To compute the inner product of two given vectors.

AIM:
To compute the inner product of two given vectors.

DESCRIPTION:

dot():

numpy.dot(vector_a, vector_b, out = None) returns the dot product of vectors a and b. It can handle 2D arrays but considering them as matrix and will perform matrix multiplication.

Syntax:

dot(a, b)[i,j,k,m] = sum(a[i,j,:] * b[k,:,m]) 


PROGRAM:
import numpy as np
v1=np.array([1,2,3,4,5])
v2=np.array([1.2,2.3,3.4,4.5,5.6])
print("inner product of two vectors is:")
print(np.dot(v1,v2))
print(np.dot([2,3],[4,5]))

OUTPUT:
inner product of two vectors is:
62.0
23

Exp no 4.4:
4)d)To save a given array to a text file and load it.

AIM:
To save a given array to a text file and load it.

DESCRIPTION:
savetxt():
The numpysavetxt() function saves an array to a text file. The np. savetxt() function takes two required parameters which are file name and data that needs to be saved in the text file.
Syntax:  numpy.savetxt(“filename”,array-name)
loadtxt():
numpy.load() in Python is used load data from a text file, with aim to be a fast reader for simple text files.
Note that each row in the text file must have the same number of values.
Syntax:  numpy.loadtxt(“filename”)

PROGRAM:
import numpy as np
arr1=np.arange(10,30,2) 
print(arr1)
txtfile=np.savetxt("textfile.txt",arr1)
print("after loading :")
loadfile=np.loadtxt("textfile.txt")
print(loadfile)

OUTPUT:
[10 12 14 16 18 20 22 24 26 28]
after loading :
[10. 12. 14. 16. 18. 20. 22. 24. 26. 28.]

Exp no 4.5:
4)e)To compute the x and y coordinates for points on a sine curve and plot the points using 
Matplotlib.

AIM:
To compute the x and y coordinates for points on a sine curve and plot the points using 
matplotlib.

DESCRIPTION:
This mathematical function helps user to calculate trigonometric sine for all x(being the array elements).
The np. Sin() NumPy function help to find sine value of the angle in degree and radian. To get sine value of the angle in radians, need to multiply angle with np. Pi/180.
Syntax:
numpy.sin(x[, out]) = ufunc ‘sin’)

PROGRAM:
import numpy as np
import matplotlib.pyplot as plt
xp=np.arange(2,20,3)
yp=np.sin(xp)
plt.plot(xp,yp)
plt.show()                                 

              


Exp no 4.6:
4)f )To sort a given array by row and column in ascending order.

AIM:
To sort a given array by row and column in ascending order.

DESCRIPTION:
sort():
This function returns a sorted copy of an array. Sorting means putting elements in an ordered sequence.
Ordered sequence is any sequence that has an order corresponding to elements, like numeric or alphabetical, ascending or descending.
Essentially, numpy. Sort will take an input array, and output a new array in sorted order. … To be clear, the NumPy sort function can actually sort arrays in more complex ways, but at a basic level, that’s all the function does. It sorts data.
Syntax:
numpy.sort(a, axis=-1, kind='quicksort', order=None)  

PROGRAM:
import numpy as np
arr1 = np.array([2,4,1,8])
arr2 = np.array([[12,0,2,1],[2,3,7,6]])
print(np.sort(arr1))
print(np.sort(arr2))

OUTPUT:
[1 2 4 8]
[[ 0  1  2 12]
 [ 2  3  6  7]]
